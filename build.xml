<?xml version='1.0'?>
<!--
  Copyright (c) 2002, 2016, Oracle and/or its affiliates. All rights reserved.

  The MySQL Connector/J is licensed under the terms of the GPLv2
  <http://www.gnu.org/licenses/old-licenses/gpl-2.0.html>, like most MySQL Connectors.
  There are special exceptions to the terms and conditions of the GPLv2 as it is applied to
  this software, see the FOSS License Exception
  <http://www.mysql.com/about/legal/licensing/foss-exception.html>.

  This program is free software; you can redistribute it and/or modify it under the terms
  of the GNU General Public License as published by the Free Software Foundation; version 2
  of the License.

  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
  without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
  See the GNU General Public License for more details.

  You should have received a copy of the GNU General Public License along with this
  program; if not, write to the Free Software Foundation, Inc., 51 Franklin St, Fifth
  Floor, Boston, MA 02110-1301  USA

-->
<project name="MySQL Connector/J" default="dist" basedir="." xmlns:jacoco="antlib:org.jacoco.ant">
    <description>
Compiling Connector/J
=====================

Connector/J 6.0 supports JDBC4.2. This requires JDBC classes to be compiled with Java 8.
The variable 'com.mysql.cj.build.jdk' is used to find the compiler when building the driver. Side by side with these, the variable 'com.mysql.cj.extra.libs' must
point to the location of third-party libraries that we don't distribute and are required for compiling. Further details can be found in
http://dev.mysql.com/doc/connector-j/en/connector-j-installing-source.html.

Targets: "dist", "full-dist", "package", "full-package", "full-package-no-sources", "compile", "install"


Testing Connector/J
===================

Connector/J 6.0 ships with an extensive test suite that can be run simply by providing a MySQL JDBC URL in the variable 'com.mysql.cj.testsuite.url' and by
calling the target "test". If nothing more is set, these tests run with the JVM referred in the variable 'com.mysql.cj.build.jdk'.
Alternatively, all tests can be run with a distinct JVM, provided that it is pointed out in the variable 'com.mysql.cj.testsuite.jvm'.
Running only one test set is possible by setting the variable 'com.mysql.cj.testsuite.test.class' with the class' fully qualified name. If also a comma separated
list of test names is provided in the variable 'com.mysql.cj.testsuite.test.methods', then only these will be executed.

Targets: "test"


MySQL Fabric support and testing
================================

Support for MySQL Fabric connections is seamlessly included in Connector/J, so when the driver is compiled it already includes all the required classes for it.
Testing MySQL Fabric support can be done by setting specific variables and running the respective targets. Further details can be found in the last targets in
this file.


Coverage and instrumentation
============================

This file ships with target "test-coverage" for collecting coverage results and "report-coverage" for creating the HTML coverage report.
The JaCoCo library needed to run these targets can be found at https://github.com/jacoco/jacoco, it's JARs should be placed
into ${com.mysql.cj.extra.libs}/jacoco directory.
The "test-coverage" target enables tests execution-time JaCoCo instrumentation, runs tests collecting coverage info into result file
which path is set as ${com.mysql.cj.coverage.result.dir}/${com.mysql.cj.coverage.result.name}.
The "report-coverage" target first merges coverage result files which are placed in 'com.mysql.cj.coverage.result.dir' directory and
their comma-delimited names are passed via 'com.mysql.cj.coverage.merge.files' property. Merge result file path is passed
via 'com.mysql.cj.coverage.merge.result' property. Finally this target builds the HTML report from
'com.mysql.cj.coverage.merge.result' file into the directory passed via 'com.mysql.cj.coverage.report.dir' property.
If some properties are not passed to ANT script then default values are used:
    com.mysql.cj.coverage.result.dir - "${com.mysql.cj.testsuite.build.dir}/coverage"
    com.mysql.cj.coverage.result.name - "jacoco.exec"
    com.mysql.cj.coverage.merge.files - none, merge step is skipped
    com.mysql.cj.coverage.merge.result - ${com.mysql.cj.coverage.result.dir}/jacoco.exec
    com.mysql.cj.coverage.report.dir - ${com.mysql.cj.coverage.result.dir}/report

Targets: "test-coverage", "report-coverage"


Sample 'build.properties' that can be used to compile, build, test and test with multi JVMs
===========================================================================================
~~~start cut here~~~
# Basic settings for 'compile', 'test' and targets that depend on these.

# External libraries needed for both compiling and testing:
# - Further details in http://dev.mysql.com/doc/connector-j/en/connector-j-installing-source.html
# - Mandatory.
com.mysql.cj.extra.libs=&lt;full_path_to_connector-j-jardeps&gt;

# JDKs needed for compiling:
# - Must point to JDK home directory.
# - Also used for testing if 'com.mysql.cj.testsuite.jvm' is not provided.
# - Mandatory.
com.mysql.cj.build.jdk=&lt;full_path_to_jdk1.8&gt;

# Single JVM/MySQL tests:
# - Must point to JDK or JRE home directory.
# - If not provided, JDBC tests are run with 'com.mysql.cj.build.jdk'.
# - Optional.
com.mysql.cj.testsuite.jvm=&lt;full_path_to_a_jdk_or_jre&gt;
# - URL to the test database.
# - Any of the current MySQL versions.
# - Mandatory for 'test' target.
com.mysql.cj.testsuite.url=jdbc:mysql://&lt;host&gt;:&lt;port&gt;/&lt;testDB&gt;?user=&lt;user&gt;&amp;password=&lt;pwd&gt;

# Cancels re-compiling between successive test executions.
# - Implicit in multiple JVM/MySQL in between iterations.
# - Comment variable if not needed.
# - Optional.
com.mysql.cj.build.noCleanBetweenCompiles=yes

# Other targets may require specific settings. Check 'build.xml' for details.
~~~end cut here~~~

Available build properties
==========================

build.properties - path to properties file

com.mysql.cj.extra.libs - location of third-party libraries

com.mysql.cj.build.jdk - path to JDK used for building driver
com.mysql.cj.build.addDebugInfo - should the driver be compiled with debugging info
com.mysql.cj.build.noCleanBetweenCompiles - if 'yes' then 'clean' and '-clean-output' targets do nothing
com.mysql.cj.build.failOnWarnings - fail the build when any warning is found

com.mysql.cj.build.commercial - build commercial variant of the driver
com.mysql.cj.build.filterLicense - build ISV variant of the driver
com.mysql.cj.build.noCrypto - build the driver without SSL support
com.mysql.cj.build.noSources - don't include sources into dist packages
com.mysql.cj.build.noMavenSources - don't include sources into Maven packages

com.mysql.cj.build.driver.version.major - like '6'
com.mysql.cj.build.driver.version.minor - like '0'
com.mysql.cj.build.driver.version.subminor - like '2'
com.mysql.cj.build.driver.version.status - optional
com.mysql.cj.build.driver.version.extra - optional
com.mysql.cj.build.driver.version.snapshot - optional, default '-SNAPSHOT'
com.mysql.cj.build.driver.version - ${com.mysql.cj.build.driver.version.major}.${com.mysql.cj.build.driver.version.minor}.${com.mysql.cj.build.driver.version.subminor}${com.mysql.cj.build.driver.version.status}
com.mysql.cj.build.driver.version.full - ${version}${com.mysql.cj.build.driver.version.extra}${com.mysql.cj.build.driver.version.snapshot}

com.mysql.cj.build.driver.displayName - default 'MySQL Connector Java'
com.mysql.cj.build.driver.name - default 'mysql-connector-java'
com.mysql.cj.build.driver.fullName - ${com.mysql.cj.build.driver.name}-${com.mysql.cj.build.driver.version.full}

com.mysql.cj.build.dir - root directory for driver build, default ./build
com.mysql.cj.build.dir.driver - driver build dir, default ${com.mysql.cj.build.dir}/${com.mysql.cj.build.driver.fullName}
com.mysql.cj.build.dir.maven - directory for preparing Maven packages, default ${com.mysql.cj.build.dir}/maven-bundle-{random number}

com.mysql.cj.dist.dir - root directory for driver packaging, default ./dist
com.mysql.cj.dist.dir.prepare - directory for preparing packages, default ${com.mysql.cj.dist.dir}/toArchive
com.mysql.cj.dist.dir.package - directory for preparing packages for given driver full name, default ${com.mysql.cj.dist.dir.prepare}/${com.mysql.cj.build.driver.fullName}
com.mysql.cj.dist.dir.prebuilt.docs - where to take prebuilt documentation files for adding them to packages, default /tmp/connectorj/docs/prebuilt


Available test properties
=========================

com.mysql.cj.testsuite.build.dir - root directory for building testsuite, default ./buildtest
com.mysql.cj.testsuite.junit.results - where to put junit reports, default ${com.mysql.cj.testsuite.build.dir}/junit
com.mysql.cj.testsuite.jvm - run testsuite under this one JVM
com.mysql.cj.testsuite.url - connection string to the main test server
com.mysql.cj.testsuite.url.openssl - connection string to the test server compiled with OpenSSL, used in sha256 tests
com.mysql.cj.testsuite.mysqlx.url - connection string to the test server with xplugin
com.mysql.cj.testsuite.test.class - testcase class name to run
com.mysql.cj.testsuite.test.methods - a comma separated list of test names existing in class defined by 'com.mysql.cj.testsuite.test.class'

See also com.mysql.cj.core.conf.PropertyDefinitions.SYSP_* variables for other test options.

    </description>


    <!-- ******************** -->
    <!-- ***** SETTINGS ***** -->
    <!-- ******************** -->


    <!-- If build.properties exists, import it. -->
    <property file="build.properties" />

    <property name="com.mysql.cj.build.driver.version.major" value="6" />
    <property name="com.mysql.cj.build.driver.version.minor" value="0" />
    <property name="com.mysql.cj.build.driver.version.subminor" value="4" />
    <property name="com.mysql.cj.build.driver.version.status" value="" />

    <property name="com.mysql.cj.build.driver.version" value="${com.mysql.cj.build.driver.version.major}.${com.mysql.cj.build.driver.version.minor}.${com.mysql.cj.build.driver.version.subminor}${com.mysql.cj.build.driver.version.status}" />
    <property name="com.mysql.cj.build.driver.name" value="mysql-connector-java" />
    <property name="com.mysql.cj.build.driver.displayName" value="MySQL Connector Java" />
    <property name="com.mysql.cj.build.driver.version.snapshot" value="-SNAPSHOT" />
    <property name="com.mysql.cj.build.driver.version.extra" value="" />
    <property name="com.mysql.cj.build.driver.version.full" value="${com.mysql.cj.build.driver.version}${com.mysql.cj.build.driver.version.extra}${com.mysql.cj.build.driver.version.snapshot}" />
    <property name="com.mysql.cj.build.driver.extraName" value="" />
    <property name="com.mysql.cj.build.driver.fullName" value="${com.mysql.cj.build.driver.name}${com.mysql.cj.build.driver.extraName}-${com.mysql.cj.build.driver.version.full}" />

    <property name="com.mysql.cj.build.dir" value="./build" />
    <property name="com.mysql.cj.build.dir.driver" value="${com.mysql.cj.build.dir}/${com.mysql.cj.build.driver.fullName}" />

    <property name="com.mysql.cj.dist.dir" value="./dist" />
    <property name="com.mysql.cj.dist.dir.prepare" value="${com.mysql.cj.dist.dir}/toArchive" />
    <property name="com.mysql.cj.dist.dir.package" value="${com.mysql.cj.dist.dir.prepare}/${com.mysql.cj.build.driver.fullName}" />

    <property name="com.mysql.cj.testsuite.build.dir" value="./buildtest" />
    <property name="com.mysql.cj.testsuite.junit.results" value="${com.mysql.cj.testsuite.build.dir}/junit" />

    <!-- Send class files to correct location if running in eclipse. -->
    <condition property="com.mysql.cj.build.compiler.output" value="bin" else="${com.mysql.cj.build.dir.driver}">
        <or>
            <isset property="eclipse.running" />
            <isset property="eclipse.pdebuild.home" />
            <contains string="${ant.home}" substring="plugins" />
        </or>
    </condition>

    <!-- Send class files to correct location if running in eclipse. -->
    <condition property="com.mysql.cj.testsuite.compiler.output" value="bin" else="${com.mysql.cj.testsuite.build.dir}/${com.mysql.cj.build.driver.fullName}">
        <or>
            <isset property="eclipse.running" />
            <isset property="eclipse.pdebuild.home" />
            <contains string="${ant.home}" substring="plugins" />
        </or>
    </condition>

    <!-- The following property are needed for finding the JDK needed for compile and can be passed on the command line to ant via -D switch. -->
    <property name="com.mysql.cj.build.jdk" value="/usr/lib/jvm/jdk1.8" />

    <!-- The folloing property sets whether javac should generate debugging info or not and can be passed on the command line to ant via -D switch. -->
    <property name="com.mysql.cj.build.addDebugInfo" value="on" />

    <!-- The following property allows to point the location of third-party libraries we don't distribute. Default value points to lib/ so user could either
       put these jars there or pass different location via ant -D switch. -->
    <property name="com.mysql.cj.extra.libs" value="lib" />

    <!-- The following property is needed for finding a JVM to execute the tests and can be passed on the command line to ant via -D switch. -->
    <property name="com.mysql.cj.testsuite.jvm" value="${com.mysql.cj.build.jdk}" />

    <!-- The following property is needed for including the prebuilt docs into packages and must be passed on the command line to ant via -D switch. -->
    <property name="com.mysql.cj.dist.dir.prebuilt.docs" value="/tmp/connectorj/docs/prebuilt" />

    <!-- The following propertyset is used to forward tests setup configurations as system variables to JUnit tasks. -->
    <propertyset id="junit.system.properties">
        <propertyref prefix="com.mysql.cj.testsuite." />
    </propertyset>

    <!-- Java compiler arguments to widen warnings detection and fail on warnings. -->
    <condition property="javac.compilerarg" value="-Xlint:all -Werror" else="">
        <isset property="com.mysql.cj.build.failOnWarnings"/>
    </condition>

    <!-- Classpaths settings. -->
    <path id="built.driver.only.classpath">
        <pathelement location="${com.mysql.cj.build.dir.driver}" />
    </path>

    <path id="project.build.classpath">
        <fileset dir="${com.mysql.cj.extra.libs}">
            <include name="**/*.jar" />
            <exclude name="**/javassist-3.15.0-GA.jar" />
        </fileset>

        <fileset dir="${com.mysql.cj.build.dir.driver}/lib">
            <include name="**/*.jar" />
        </fileset>

        <pathelement location="${com.mysql.cj.build.dir.driver}" />
    </path>

    <path id="instrumentation.classpath">
        <path refid="project.build.classpath" />

        <pathelement location="${com.mysql.cj.build.compiler.output}" />
    </path>

    <path id="com.mysql.cj.testsuite.build.classpath">
        <fileset dir="${com.mysql.cj.extra.libs}">
            <include name="**/*.jar" />
            <exclude name="**/javassist-3.15.0-GA.jar" />
        </fileset>

        <fileset dir="${com.mysql.cj.build.dir.driver}">
            <include name="**/*.jar" />
        </fileset>

        <pathelement location="${com.mysql.cj.testsuite.build.dir}/${com.mysql.cj.build.driver.fullName}" />
    </path>

    <taskdef uri="antlib:org.jacoco.ant" resource="org/jacoco/ant/antlib.xml">
        <classpath>
            <fileset dir="${com.mysql.cj.extra.libs}">
                <include name="**/jacocoant.jar" />
            </fileset>
        </classpath>
    </taskdef>


    <!-- ************************* -->
    <!-- ***** VERIFICATIONS ***** -->
    <!-- ************************* -->


    <!-- Check for required external libraries. -->
    <target name="-extra-libs-check">
        <fail message="The property 'com.mysql.cj.extra.libs' must point to a directory that contains the libraries required for build tasks.">
            <condition>
                <not>
                    <available file="${com.mysql.cj.extra.libs}" type="dir" />
                </not>
            </condition>
        </fail>
        <fail message="Hibernate libraries, required for build tasks, must be in the directory '${com.mysql.cj.extra.libs}/hibernate4'.">
            <condition>
                <not>
                    <available file="${com.mysql.cj.extra.libs}/hibernate4" type="dir" />
                </not>
            </condition>
        </fail>
    </target>


    <!-- Check for required JDKs for compilation. -->
    <target name="-compiler-check" depends="-jdk-check" />


    <!-- Check for required JDK for compilation of JDBC implementation. -->
    <target name="-jdk-check">
        <property name="com.mysql.cj.build.jdk.java" value="${com.mysql.cj.build.jdk}/bin/java" />
        <property name="com.mysql.cj.build.jdk.javac" value="${com.mysql.cj.build.jdk}/bin/javac" />

        <local name="com.mysql.cj.build.jdk.version" />
        <exec executable="${com.mysql.cj.build.jdk.java}"
              outputproperty="com.mysql.cj.build.jdk.version"
              failonerror="false"
              failifexecutionfails="false"
              resultproperty="com.mysql.cj.build.jdk.exitstatus">
            <arg value="-version" />
        </exec>

        <fail message="Java 8 is required. Set the full path to this JDK home with the property 'com.mysql.cj.build.jdk'. Default: '/usr/lib/jvm/jdk1.8').">
            <condition>
                <not>
                    <and>
                        <equals arg1="${com.mysql.cj.build.jdk.exitstatus}" arg2="0" />
                        <contains string="${com.mysql.cj.build.jdk.version}" substring="java version &quot;1.8" casesensitive="true" />
                    </and>
                </not>
            </condition>
        </fail>
    </target>


    <!-- Check provided JVM for running tests. -->
    <target name="-testsuite-jvm-check">
        <property name="com.mysql.cj.testsuite.jvm.java" value="${com.mysql.cj.testsuite.jvm}/bin/java" />

        <local name="com.mysql.cj.testsuite.jvm.version" />
        <exec executable="${com.mysql.cj.testsuite.jvm.java}"
              outputproperty="com.mysql.cj.testsuite.jvm.version"
              failonerror="false"
              failifexecutionfails="false"
              resultproperty="com.mysql.cj.testsuite.jvm.exitstatus">
            <arg value="-version" />
        </exec>

        <fail message="Testing Connector/J requires a JVM 1.8 or higher. Set the path to this JVM (JRE or JDK) home with the property 'com.mysql.cj.testsuite.jvm'. Default: '${com.mysql.cj.build.jdk}'.">
            <condition>
                <not>
                    <equals arg1="${com.mysql.cj.testsuite.jvm.exitstatus}" arg2="0" />
                </not>
            </condition>
        </fail>
    </target>


    <!-- ************************************** -->
    <!-- ***** INITIALIZATION & FILE COPY ***** -->
    <!-- ************************************** -->


    <!-- Prepares files and settings for compiling driver. -->
    <target name="init" depends="-compiler-check, -init-copy, -init-filter-license, -init-no-crypto">
        <!-- The following is needed for source distributions as the classpath can't be dynamically altered, and not having this directory present causes the
             build to fail. -->
        <available property="com.mysql.cj.prebuiltDocsPresent" file="${com.mysql.cj.dist.dir.prebuilt.docs}"/>
        <available property="com.mysql.cj.c3p0Present" classname="com.mchange.v2.c3p0.QueryConnectionTester" classpathref="project.build.classpath"/>
        <available property="com.mysql.cj.log4jPresent" classname="org.apache.log4j.Logger" classpathref="project.build.classpath"/>
        <available property="com.mysql.cj.jbossPresent" classname="org.jboss.resource.adapter.jdbc.ValidConnectionChecker"
                   classpathref="project.build.classpath"/>
    </target>


    <!-- Copy source files and fix licensing header in source files. -->
    <target name="-init-copy" depends="-init-copy-common, -replace-headers-commercial" />


    <!-- Copy source files. -->
    <target name="-init-copy-common" depends="clean">
        <tstamp />

        <mkdir dir="${com.mysql.cj.build.dir}" />

        <exec dir="."
              executable="cmd"
              osfamily="windows"
              outputproperty="com.mysql.cj.git_revision_from_cmd"
              failonerror="false"
              failifexecutionfails="false"
              resultproperty="com.mysql.cj.gitcheckexitstatus">
            <arg line="/c git rev-parse --verify HEAD^^{commit}" />
        </exec>

        <exec executable="git"
              osfamily="unix"
              outputproperty="com.mysql.cj.git_revision_from_cmd"
              failonerror="false"
              failifexecutionfails="false"
              resultproperty="com.mysql.cj.gitcheckexitstatus">
            <arg line="rev-parse --verify HEAD^{commit}" />
        </exec>

        <!-- The following workaround is needed for the RE builds environment, which build from a non-versioned directory, so revision information is provided
            from an external revision-info.properties file. -->
        <property prefix="revinfo" file="revision-info.properties" />

        <condition property="com.mysql.cj.git_revision" value="${com.mysql.cj.git_revision_from_cmd}" else="${revinfo.commit}">
            <equals arg1="${com.mysql.cj.gitcheckexitstatus}" arg2="0" />
        </condition>

        <filterset id="versionFilterset">
            <filter token="MYSQL_CJ_MAJOR_VERSION" value="${com.mysql.cj.build.driver.version.major}" />
            <filter token="MYSQL_CJ_MINOR_VERSION" value="${com.mysql.cj.build.driver.version.minor}" />
            <filter token="MYSQL_CJ_SUBMINOR_VERSION" value="${com.mysql.cj.build.driver.version.subminor}" />
            <filter token="MYSQL_CJ_VERSION_STATUS" value="${com.mysql.cj.build.driver.version.status}" />
            <filter token="MYSQL_CJ_VERSION" value="${com.mysql.cj.build.driver.version.full}" />
            <filter token="MYSQL_CJ_REVISION" value="${com.mysql.cj.git_revision}" />
            <filter token="MYSQL_CJ_FULL_PROD_NAME" value="${com.mysql.cj.build.driver.fullName}" />
            <filter token="MYSQL_CJ_DISPLAY_PROD_NAME" value="${com.mysql.cj.build.driver.displayName}" />
        </filterset>

        <condition property="com.mysql.cj.build.licenseType" value="commercial" else="GPL">
            <isset property="com.mysql.cj.build.commercial" />
        </condition>
        <filterset id="licenseFilterset">
            <filter token="MYSQL_CJ_LICENSE_TYPE" value="${com.mysql.cj.build.licenseType}" />
        </filterset>

        <copy todir="${com.mysql.cj.build.dir.driver}" filtering="true">
            <fileset dir="src/build/java" />
            <fileset dir="src/build/misc" />
            <fileset dir="src/generated/java" />
            <fileset dir="src/main/java" />
            <fileset dir="src/main/resources" />
            <fileset dir="src/demo/java" />
            <fileset dir="src/demo/resources" />

            <filterset refid="versionFilterset" />
            <filterset refid="licenseFilterset" />
        </copy>

        <copy todir="${com.mysql.cj.build.dir.driver}/lib" filtering="false">
            <fileset dir="lib"/>
        </copy>
    </target>

    <target name="-init-copy-test" depends="-init-copy">
        <tstamp />

        <mkdir dir="${com.mysql.cj.testsuite.build.dir}" />

        <copy todir="${com.mysql.cj.testsuite.build.dir}/${com.mysql.cj.build.driver.fullName}" filtering="true">
            <fileset dir="src/test/java" />
            <filterset refid="versionFilterset" />
            <filterset refid="licenseFilterset" />
        </copy>
    </target>

    <!-- Fix licensing header in source files. -->
    <target name="-replace-headers-commercial" if="com.mysql.cj.build.commercial">
        <replaceregexp match=" *The MySQL Connector.*1301  ?USA"
                       replace="${line.separator}${line.separator}${line.separator}${line.separator}${line.separator}${line.separator}${line.separator}${line.separator}${line.separator}${line.separator}${line.separator}${line.separator}${line.separator}${line.separator}${line.separator}${line.separator}"
                       flags="s">
            <fileset dir="${com.mysql.cj.build.dir.driver}" includes="**/*" />
        </replaceregexp>
    </target>


    <!-- Add commercial license configuration class (Build). -->
    <target name="-init-filter-license" depends="-extra-libs-check, -init-copy" if="com.mysql.cj.build.filterLicense">
        <copy file="${com.mysql.cj.extra.libs}/6.0/CommercialLicenseConfiguration.notjava"
              toFile="${com.mysql.cj.build.dir.driver}/com/mysql/cj/core/LicenseConfiguration.java"
              overwrite="true" />
    </target>


    <!-- Add no-crypto export control class (Build). -->
    <target name="-init-no-crypto" depends="-extra-libs-check, -init-copy" if="com.mysql.cj.build.noCrypto">
        <copy file="${com.mysql.cj.extra.libs}/6.0/ExportControlledNoCrypto.notjava"
              toFile="${com.mysql.cj.build.dir.driver}/com/mysql/cj/core/io/ExportControlled.java"
              overwrite="true" />
    </target>


    <!-- Copy commercial license configuration class (Package). -->
    <target name="-copy-filter-license" depends="-extra-libs-check, -init-copy" if="com.mysql.cj.build.filterLicense">
        <copy file="${com.mysql.cj.extra.libs}/6.0/CommercialLicenseConfiguration.notjava"
              toFile="${com.mysql.cj.dist.dir.package}/src/main/java/com/mysql/cj/core/LicenseConfiguration.java"
              overwrite="true" />
    </target>


    <!-- Copy no-crypto export control class (Package). -->
    <target name="-copy-no-crypto" depends="-extra-libs-check, -init-copy" if="com.mysql.cj.build.noCrypto">
        <copy file="${com.mysql.cj.extra.libs}/6.0/ExportControlledNoCrypto.notjava"
              toFile="${com.mysql.cj.dist.dir.package}/src/main/java/com/mysql/cj/core/io/ExportControlled.java"
              overwrite="true" />
    </target>


    <!-- Copy README-commercial info (Package). -->
    <target name="-copy-readme-commercial" depends="-extra-libs-check, -init-copy" if="com.mysql.cj.build.commercial">
        <copy file="${com.mysql.cj.extra.libs}/6.0/README-commercial" tofile="${com.mysql.cj.dist.dir.package}/README.txt" filtering="true">
            <filterset refid="versionFilterset" />
            <filterset refid="licenseFilterset" />
        </copy>
        <copy file="${com.mysql.cj.dist.dir.package}/README.txt" tofile="${com.mysql.cj.dist.dir.package}/README" overwrite="true" />
    </target>


    <!-- Copy README info (Package). -->
    <target name="-copy-readme-noncommercial" depends="-init-copy" unless="com.mysql.cj.build.commercial">
        <copy file="${basedir}/README" tofile="${com.mysql.cj.dist.dir.package}/README.txt" filtering="true">
            <filterset refid="versionFilterset" />
        </copy>
        <copy file="${com.mysql.cj.dist.dir.package}/README.txt" tofile="${com.mysql.cj.dist.dir.package}/README" overwrite="true" />
    </target>


    <!-- Copy LICENSE.mysql and replace license commercial headers (Package). -->
    <target name="-replace-license-commercial" depends="-extra-libs-check, -init-copy" if="com.mysql.cj.build.commercial">
        <delete file="${com.mysql.cj.dist.dir.package}/COPYING" />
        <copy file="${com.mysql.cj.extra.libs}/6.0/LICENSE.mysql" toDir="${com.mysql.cj.dist.dir.package}" />

        <!-- For safety. -->
        <replaceregexp match=" *The MySQL Connector.*1301  ?USA"
                       replace="${line.separator}${line.separator}${line.separator}${line.separator}${line.separator}${line.separator}${line.separator}${line.separator}${line.separator}${line.separator}${line.separator}${line.separator}${line.separator}${line.separator}${line.separator}${line.separator}"
                       flags="s">
            <fileset dir="${com.mysql.cj.dist.dir.package}" includes="**/*" />
        </replaceregexp>
    </target>


    <!-- ************************************ -->
    <!-- ***** DISTRIBUTION & PACKAGING ***** -->
    <!-- ************************************ -->


    <!-- Make MySQL GPL-licensed or commercially-licensed binaries package, that contain sources and docs. -->
    <target name="full-package"
            description="Builds driver, binary .jar file, docs and packages (.zip, .tar.gz) suitable for distribution that _do_ contain sources and docs."
            depends="real-clean, full-dist, -make-packages, -create-archives" />


    <!-- Make MySQL GPL-licensed or commercially-licensed binaries package, that doesn't contain sources but contain docs. -->
    <target name="full-package-no-sources"
            description="Builds driver, binary .jar file, docs and packages (.zip, .tar.gz) suitable for distribution that do _not_ contain sources but contain docs."
            depends="real-clean, full-dist, -make-packages, -remove-sources, -create-archives" />


    <!-- Make MySQL GPL-licensed or commercially-licensed binaries package, that contain sources but no docs. -->
    <target name="package"
            description="Builds driver, binary .jar file, docs and packages (.zip, .tar.gz) suitable for distribution that _do_ contain sources but no docs."
            depends="real-clean, dist, -make-packages, -create-archives" />


    <!-- Build a distribution 'image' that include docs. -->
    <target name="full-dist" description="Builds driver, binary .jar file and docs, basically a distribution 'image'." depends="real-clean, dist, -bundle-docs" />


    <!-- Build and install the driver jar into the local maven repository. -->
    <target name="install" description="Builds and installs the driver jar into the local maven repository." depends="full-package">
        <exec executable="mvn" osfamily="unix" failonerror="true" failifexecutionfails="true">
            <arg line="install:install-file 
                -Dfile=${com.mysql.cj.build.dir.maven}/${com.mysql.cj.build.driver.fullName}.jar
                -Dsources=${com.mysql.cj.build.dir.maven}/${com.mysql.cj.build.driver.fullName}-sources.jar
                -DpomFile=${com.mysql.cj.build.dir.driver}/pom.xml
                -DcreateChecksum=true" />
        </exec>
    </target>


    <!-- Build a distribution 'image' that doesn't include docs. -->
    <target name="dist" description="Builds driver and binary .jar file, basically a distribution 'image' without docs." depends="init, compile">
        <delete file="${com.mysql.cj.build.dir.driver}/${com.mysql.cj.build.driver.fullName}-bin.jar" />

        <!-- JDBC 4+ support of service provider mechanism. -->
        <mkdir dir="${com.mysql.cj.build.dir.driver}/META-INF/services/" />
        <echo file="${com.mysql.cj.build.dir.driver}/META-INF/services/java.sql.Driver"
              message="com.mysql.cj.jdbc.Driver" />

        <property name="com.mysql.cj.build.meta-inf.osgid-version" value="${com.mysql.cj.build.driver.version.major}.${com.mysql.cj.build.driver.version.minor}.${com.mysql.cj.build.driver.version.subminor}" />

        <property name="com.mysql.cj.build.meta-inf.jee-imports" value="javax.naming,javax.naming.spi,javax.sql,javax.transaction.xa;version=&quot;[1.0.1, 2.0.0)&quot;;resolution:=optional" />
        <property name="com.mysql.cj.build.meta-inf.crypto-imports" value="javax.net,javax.net.ssl;version=&quot;[1.0.1, 2.0.0)&quot;;resolution:=optional" />
        <property name="com.mysql.cj.build.meta-inf.jdbc4-imports" value="javax.xml.parsers, javax.xml.stream,javax.xml.transform,javax.xml.transform.dom,javax.xml.transform.sax,javax.xml.transform.stax,javax.xml.transform.stream,org.w3c.dom,org.xml.sax,org.xml.sax.helpers;resolution:=optional" />
        <property name="com.mysql.cj.build.meta-inf.integration-imports" value="com.mchange.v2.c3p0;version=&quot;[0.9.1.2, 1.0.0)&quot;;resolution:=optional,org.jboss.resource.adapter.jdbc;resolution:=optional,org.jboss.resource.adapter.jdbc.vendor;resolution:=optional" />

        <property name="com.mysql.cj.build.meta-inf.driver-exports" value="com.mysql.cj.jdbc;version=&quot;${com.mysql.cj.build.meta-inf.osgid-version}&quot;;uses:=&quot;com.mysql.cj.jdbc.log,javax.naming,javax.net.ssl,javax.xml.transform,org.xml.sax&quot;" />
        <property name="com.mysql.cj.build.meta-inf.jee-exports" value="com.mysql.cj.jdbc;version=&quot;${com.mysql.cj.build.meta-inf.osgid-version}&quot;;uses:=&quot;com.mysql.cj.jdbc,com.mysql.cj.api.log,javax.naming,javax.sql,javax.transaction.xa&quot;" />
        <property name="com.mysql.cj.build.meta-inf.logging-exports" value="com.mysql.cj.jdbc.log;version=&quot;${com.mysql.cj.build.meta-inf.osgid-version}&quot;" />
        <property name="com.mysql.cj.build.meta-inf.profiling-exports" value="com.mysql.cj.jdbc.profiler;version=&quot;${com.mysql.cj.build.meta-inf.osgid-version}&quot;;uses:=&quot;com.mysql.cj.jdbc&quot;" />
        <property name="com.mysql.cj.build.meta-inf.util-exports" value="com.mysql.cj.jdbc.util;version=&quot;${com.mysql.cj.build.meta-inf.osgid-version}&quot;;uses:=&quot;com.mysql.cj.jdbc.log&quot;" />
        <property name="com.mysql.cj.build.meta-inf.exceptions-exports" value="com.mysql.cj.jdbc.exceptions;version=&quot;${com.mysql.cj.build.meta-inf.osgid-version}&quot;" />
        <property name="com.mysql.cj.build.meta-inf.fabric-exports" value="com.mysql.cj.fabric.jdbc;version=&quot;${com.mysql.cj.build.meta-inf.osgid-version}&quot;;uses:=&quot;com.mysql.cj.jdbc&quot;" />

        <property name="com.mysql.cj.build.meta-inf.interceptors-exports" value="com.mysql.cj.jdbc.interceptors;version=&quot;${com.mysql.cj.build.meta-inf.osgid-version}&quot;;uses:=&quot;com.mysql.cj.jdbc&quot;" />
        <property name="com.mysql.cj.build.meta-inf.integration-exports" value="com.mysql.cj.jdbc.integration.c3p0;version=&quot;${com.mysql.cj.build.meta-inf.osgid-version}&quot;,com.mysql.cj.jdbc.integration.jboss;version=&quot;${com.mysql.cj.build.meta-inf.osgid-version}&quot;" />
        <property name="com.mysql.cj.build.meta-inf.configs-exports" value="com.mysql.cj.configurations;version=&quot;${com.mysql.cj.build.meta-inf.osgid-version}&quot;" />
        <property name="com.mysql.cj.build.meta-inf.legacy-exports" value="org.gjt.mm.mysql;version=&quot;${com.mysql.cj.build.meta-inf.osgid-version}&quot;" />

        <manifest file="${com.mysql.cj.build.dir.driver}/META-INF/MANIFEST.MF">
            <attribute name="Built-By" value="${user.name}" />
            <attribute name="Specification-Title" value="JDBC" />
            <attribute name="Specification-Version" value="4.2" />
            <attribute name="Specification-Vendor" value="Oracle Corporation" />
            <attribute name="Implementation-Title" value="${com.mysql.cj.build.driver.displayName}" />
            <attribute name="Implementation-Version" value="${com.mysql.cj.build.driver.version.full}" />
            <attribute name="Implementation-Vendor-Id" value="com.mysql" />
            <attribute name="Implementation-Vendor" value="Oracle" />

            <!-- OSGi -->
            <attribute name="Bundle-Vendor" value="Oracle Corporation" />
            <attribute name="Bundle-Classpath" value="." />
            <attribute name="Bundle-Version" value="${com.mysql.cj.build.meta-inf.osgid-version}" />
            <attribute name="Bundle-Name" value="Oracle Corporation's JDBC Driver for MySQL" />
            <attribute name="Bundle-ManifestVersion" value="2" />
            <attribute name="Bundle-SymbolicName" value="com.mysql.cj" />
            <attribute name="Export-Package"
                       value="${com.mysql.cj.build.meta-inf.driver-exports},${com.mysql.cj.build.meta-inf.jee-exports},${com.mysql.cj.build.meta-inf.logging-exports},${com.mysql.cj.build.meta-inf.profiling-exports},${com.mysql.cj.build.meta-inf.util-exports},${com.mysql.cj.build.meta-inf.exceptions-exports},${com.mysql.cj.build.meta-inf.interceptors-exports},${com.mysql.cj.build.meta-inf.integration-exports},${com.mysql.cj.build.meta-inf.configs-exports},${com.mysql.cj.build.meta-inf.legacy-exports},${com.mysql.cj.build.meta-inf.fabric-exports}" />
            <attribute name="Import-Package" value="${com.mysql.cj.build.meta-inf.crypto-imports},${com.mysql.cj.build.meta-inf.jdbc4-imports},${com.mysql.cj.build.meta-inf.jee-imports},${com.mysql.cj.build.meta-inf.integration-imports}" />
        </manifest>

        <jar jarfile="${com.mysql.cj.build.dir.driver}/${com.mysql.cj.build.driver.fullName}-bin.jar"
             basedir="${com.mysql.cj.build.compiler.output}"
             includes="**/*.class,**/*.properties*,META-INF/**"
             excludes="testsuite/**,demo/**,instrumentation/**"
             index="true"
             manifest="${com.mysql.cj.build.dir.driver}/META-INF/MANIFEST.MF" />
    </target>


    <!-- Prepare a package for archiving. -->
    <target name="-make-packages"
            depends="-make-packages-init, -copy-filter-license, -copy-no-crypto, -copy-readme-commercial, -copy-readme-noncommercial, -replace-license-commercial">
        <!-- Fix CRLF for various platforms. -->

        <!-- For Windows-y platforms. -->
        <fixcrlf srcdir="${com.mysql.cj.dist.dir.package}" tab="remove" tablength="8" eol="crlf" includes="**/README.txt" />

        <!-- For Unix-y platforms. -->
        <fixcrlf srcdir="${com.mysql.cj.dist.dir.package}" tab="remove" tablength="8" eol="lf" includes="**/README" />
    </target>


    <!-- Prepare a package for archiving (initialize). -->
    <target name="-make-packages-init" depends="dist">
        <mkdir dir="${com.mysql.cj.dist.dir}" />
        <mkdir dir="${com.mysql.cj.dist.dir.prepare}" />
        <mkdir dir="${com.mysql.cj.dist.dir.package}" />

        <delete dir="${com.mysql.cj.dist.dir.prepare}" />

        <patternset id="non.test.sources">
            <exclude name="**/*.nb*" />
            <exclude name="**/*.bak" />
            <exclude name="**/*.*~" />
            <exclude name="**/clover/*" />
            <exclude name="**/checkstyle/*" />
            <exclude name="**/.*" />
        </patternset>

        <copy todir="${com.mysql.cj.dist.dir.package}">
            <fileset dir="${com.mysql.cj.build.dir.driver}" includes="docs/**, *.jar" excludes="docs/sources">
                <patternset refid="non.test.sources" />
            </fileset>

            <fileset dir="." includes="src/**, lib/*, build.xml, CHANGES, COPYING">
                <patternset refid="non.test.sources" />
            </fileset>
        </copy>
    </target>


    <!-- Delete source files from package. -->
    <target name="-remove-sources">
        <echo>Removing sources from '${com.mysql.cj.dist.dir.prepare}'</echo>
        <delete>
            <fileset dir="${com.mysql.cj.dist.dir.package}">
                <include name="**/*.java" />
                <include name="build.xml" />
            </fileset>
        </delete>

        <delete dir="${com.mysql.cj.dist.dir.package}/src" />

        <property name="com.mysql.cj.build.noSources" value="yes" />
    </target>


    <!-- Create archive files with package. -->
    <target name="-create-archives" depends="-create-common-archives, -create-maven-archive" />


    <!-- Create common archives. -->
    <target name="-create-common-archives" depends="-make-packages">
        <delete file="${com.mysql.cj.dist.dir}/${com.mysql.cj.build.driver.fullName}.tar.gz" />

        <tar destfile="${com.mysql.cj.dist.dir}/${com.mysql.cj.build.driver.fullName}.tar.gz" compression="gzip" longfile="gnu">
            <tarfileset dir="${com.mysql.cj.dist.dir.prepare}">
                <patternset refid="non.test.sources" />
            </tarfileset>
        </tar>
        <checksum file="${com.mysql.cj.dist.dir}/${com.mysql.cj.build.driver.fullName}.tar.gz" forceOverwrite="yes" fileext=".md5" algorithm="MD5" />

        <delete file="${com.mysql.cj.dist.dir}/${com.mysql.cj.build.driver.fullName}.zip" />

        <zip destfile="${com.mysql.cj.dist.dir}/${com.mysql.cj.build.driver.fullName}.zip">
            <fileset dir="${com.mysql.cj.dist.dir.prepare}">
                <patternset refid="non.test.sources" />
            </fileset>
        </zip>
        <checksum file="${com.mysql.cj.dist.dir}/${com.mysql.cj.build.driver.fullName}.zip" forceOverwrite="yes" fileext=".md5" algorithm="MD5" />
    </target>


    <!-- Create a Maven bundle for upload to their repository. -->
    <target name="-create-maven-archive"
            depends="-make-packages, -create-maven-archive-common, -create-maven-archive-sources"
            unless="com.mysql.cj.build.commercial">
        <delete file="${com.mysql.cj.dist.dir}/${com.mysql.cj.build.driver.fullName}.maven.tar.gz" />

        <tar destfile="${com.mysql.cj.dist.dir}/${com.mysql.cj.build.driver.fullName}.maven.tar.gz" basedir="${com.mysql.cj.build.dir.maven}" compression="gzip" longfile="gnu" />
    </target>


    <!-- Create a Maven bundle for upload to their repository (common files to all packaging modes). -->
    <target name="-create-maven-archive-common" unless="com.mysql.cj.build.commercial">
        <tempfile destdir="${com.mysql.cj.build.dir}" prefix="maven-bundle-" property="com.mysql.cj.build.dir.maven" />

        <mkdir dir="${com.mysql.cj.build.dir.maven}" />

        <jar jarfile="${com.mysql.cj.build.dir.maven}/${com.mysql.cj.build.driver.fullName}.jar"
             basedir="${com.mysql.cj.build.compiler.output}"
             includes="**/*.class,**/*.properties*,COPYING,README,META-INF/**"
             excludes="testsuite/**,demo/**,instrumentation/**"
             index="true"
             manifest="${com.mysql.cj.build.dir.driver}/META-INF/MANIFEST.MF" />
        <checksum file="${com.mysql.cj.build.dir.maven}/${com.mysql.cj.build.driver.fullName}.jar" forceOverwrite="yes" fileext=".md5" algorithm="MD5" />
        <checksum file="${com.mysql.cj.build.dir.maven}/${com.mysql.cj.build.driver.fullName}.jar" forceOverwrite="yes" fileext=".sha1" algorithm="SHA-1" />

        <copy file="${com.mysql.cj.build.dir.driver}/pom.xml" toFile="${com.mysql.cj.build.dir.maven}/${com.mysql.cj.build.driver.fullName}.pom" filtering="false" />
        <checksum file="${com.mysql.cj.build.dir.maven}/${com.mysql.cj.build.driver.fullName}.pom" forceOverwrite="yes" fileext=".md5" algorithm="MD5" />
        <checksum file="${com.mysql.cj.build.dir.maven}/${com.mysql.cj.build.driver.fullName}.pom" forceOverwrite="yes" fileext=".sha1" algorithm="SHA-1" />

        <copy file="./COPYING" toDir="${com.mysql.cj.build.dir.maven}" />
        <checksum file="${com.mysql.cj.build.dir.maven}/COPYING" forceOverwrite="yes" fileext=".md5" algorithm="MD5" />
        <checksum file="${com.mysql.cj.build.dir.maven}/COPYING" forceOverwrite="yes" fileext=".sha1" algorithm="SHA-1" />
    </target>


    <!-- Create a Maven bundle for upload to their repository (include sources). -->
    <target name="-create-maven-archive-sources" depends="-create-maven-archive-sources-check, -create-maven-archive-common" unless="com.mysql.cj.build.noMavenSources" >
        <jar jarfile="${com.mysql.cj.build.dir.maven}/${com.mysql.cj.build.driver.fullName}-sources.jar"
             basedir="${com.mysql.cj.build.compiler.output}"
             includes="**/*.java,**/*.properties*,COPYING,README,README.txt"
             excludes="testsuite/**,demo/**,instrumentation/**,doc/**" />
        <checksum file="${com.mysql.cj.build.dir.maven}/${com.mysql.cj.build.driver.fullName}-sources.jar" forceOverwrite="yes" fileext=".md5" algorithm="MD5" />
        <checksum file="${com.mysql.cj.build.dir.maven}/${com.mysql.cj.build.driver.fullName}-sources.jar" forceOverwrite="yes" fileext=".sha1" algorithm="SHA-1" />
    </target>

    <target name="-create-maven-archive-sources-check">
        <condition property="com.mysql.cj.build.noMavenSources">
            <or>
                <isset property="com.mysql.cj.build.noSources" />
                <isset property="com.mysql.cj.build.commercial" />
            </or>
        </condition>
    </target>

    <!-- Prepare docs to include in a distribution. -->
    <target name="-bundle-docs" depends="init" if="com.mysql.cj.prebuiltDocsPresent">
        <copy file="${com.mysql.cj.dist.dir.prebuilt.docs}/en/html/connector-j.html" todir="${com.mysql.cj.build.dir.driver}/docs" failonerror="false" />
        <copy file="${com.mysql.cj.dist.dir.prebuilt.docs}/en/pdf/connector-j.pdf" todir="${com.mysql.cj.build.dir.driver}/docs" failonerror="false" />
        <copy file="${com.mysql.cj.dist.dir.prebuilt.docs}/en/txt/connector-j.txt" tofile="${com.mysql.cj.build.dir.driver}/docs/README.txt" failonerror="false" />
    </target>


    <!-- ********************* -->
    <!-- ***** COMPILING ***** -->
    <!-- ********************* -->


    <!-- Compile the driver, JUnit test suite and 'helpers' for third-party software. -->
    <target name="compile"
            description="Compiles driver, JUnit test suite and integration 'helpers' for third-party software."
            depends="init, compile-driver, compile-integration" />


    <!-- Compile the driver including JDBC implementation only. -->
    <target name="compile-driver" description="Compiles driver including JDBC implementation only." depends="init, -clean-output">
        <echo>Compiling MySQL Connector/J JDBC implementation with '${com.mysql.cj.build.jdk}' to '${com.mysql.cj.build.compiler.output}'</echo>

        <javac sourcepath=""
               srcdir="${com.mysql.cj.build.dir.driver}"
               destdir="${com.mysql.cj.build.compiler.output}"
               deprecation="off"
               debug="${com.mysql.cj.build.addDebugInfo}"
               fork="yes"
               executable="${com.mysql.cj.build.jdk.javac}"
               compiler="modern"
               includeantruntime="false">
            <include name="**/*.java" />
            <exclude name="testsuite/**" />
            <exclude name="com/mysql/cj/jdbc/integration/**" />
            <exclude name="com/mysql/cj/jdbc/log/Log4JLogger.java" />
            <classpath refid="project.build.classpath" />
            <compilerarg line="${javac.compilerarg}" />
        </javac>
        <java jvm="${com.mysql.cj.build.jdk.java}" classname="instrumentation.CommonChecks" classpathref="instrumentation.classpath" fork="yes" failonerror="true">
            <arg value="${com.mysql.cj.build.compiler.output}" />
        </java>
        <java jvm="${com.mysql.cj.build.jdk.java}"
              classname="instrumentation.TranslateExceptions"
              classpathref="instrumentation.classpath"
              fork="yes"
              failonerror="true">
            <arg value="${com.mysql.cj.build.compiler.output}" />
        </java>
    </target>


    <!-- Compile the driver and JUnit test suite. -->
    <target name="compile-testsuite" description="Compiles driver and JUnit test suite." depends="init, -init-copy-test, dist">
        <echo>Compiling MySQL Connector/J testsuite with '${com.mysql.cj.build.jdk}' to '${com.mysql.cj.build.compiler.output}'</echo>

        <javac sourcepath=""
               srcdir="${com.mysql.cj.testsuite.build.dir}/${com.mysql.cj.build.driver.fullName}"
               destdir="${com.mysql.cj.testsuite.compiler.output}"
               deprecation="off"
               debug="${com.mysql.cj.build.addDebugInfo}"
               fork="yes"
               executable="${com.mysql.cj.build.jdk.javac}"
               compiler="modern"
               includeantruntime="false">
            <!--include name="testsuite/**" /-->
            <classpath refid="com.mysql.cj.testsuite.build.classpath" />
            <compilerarg line="${javac.compilerarg}" />
        </javac>
    </target>


    <!-- Compile the driver including JDBC implementation and integration 'helpers' for third-party software. -->
    <target name="compile-integration"
            description="Compiles driver including JDBC implementation and integration 'helpers' for third-party software."
            depends="compile-driver, -compile-integration-c3p0, -compile-integration-jboss, -compile-integration-log4j" />


    <!-- Compile c3p0 integration. -->
    <target name="-compile-integration-c3p0" depends="compile-driver" if="com.mysql.cj.c3p0Present">
        <echo>Compiling MySQL Connector/J-c3p0 integration with '${com.mysql.cj.build.jdk}' to '${com.mysql.cj.build.compiler.output}'</echo>

        <javac sourcepath=""
               srcdir="${com.mysql.cj.build.dir.driver}"
               destdir="${com.mysql.cj.build.compiler.output}"
               deprecation="off"
               debug="${com.mysql.cj.build.addDebugInfo}"
               fork="yes"
               executable="${com.mysql.cj.build.jdk.javac}"
               compiler="modern"
               includeantruntime="false">
            <include name="com/mysql/cj/jdbc/integration/c3p0/**" />
            <classpath refid="project.build.classpath" />
            <compilerarg line="${javac.compilerarg}" />
        </javac>
    </target>


    <!-- Compile jBoss integration. -->
    <target name="-compile-integration-jboss" depends="compile-driver" if="com.mysql.cj.jbossPresent">
        <echo>Compiling MySQL Connector/J-jboss integration with '${com.mysql.cj.build.jdk}' to '${com.mysql.cj.build.compiler.output}'</echo>

        <javac sourcepath=""
               srcdir="${com.mysql.cj.build.dir.driver}"
               destdir="${com.mysql.cj.build.compiler.output}"
               deprecation="off"
               debug="${com.mysql.cj.build.addDebugInfo}"
               fork="yes"
               executable="${com.mysql.cj.build.jdk.javac}"
               compiler="modern"
               includeantruntime="false">
            <include name="com/mysql/cj/jdbc/integration/jboss/**" />
            <classpath refid="project.build.classpath" />
            <compilerarg line="${javac.compilerarg}" />
        </javac>
    </target>


    <!-- Compile Log4j integration. -->
    <target name="-compile-integration-log4j" depends="compile-driver" if="com.mysql.cj.log4jPresent">
        <echo>Compiling MySQL Connector/J-log4j integration with '${com.mysql.cj.build.jdk}' to '${com.mysql.cj.build.compiler.output}'</echo>

        <javac sourcepath=""
               srcdir="${com.mysql.cj.build.dir.driver}"
               destdir="${com.mysql.cj.build.compiler.output}"
               deprecation="off"
               debug="${com.mysql.cj.build.addDebugInfo}"
               fork="yes"
               executable="${com.mysql.cj.build.jdk.javac}"
               compiler="modern"
               includeantruntime="false">
            <include name="com/mysql/cj/jdbc/log/Log4JLogger.java" />
            <classpath refid="project.build.classpath" />
            <compilerarg line="${javac.compilerarg}" />
        </javac>
    </target>


    <!-- ******************* -->
    <!-- ***** CLEANUP ***** -->
    <!-- ******************* -->


    <!-- Delete the build and distribution directories and archives. -->
    <target name="real-clean" description="Deletes the build and distribution directories.">
        <delete dir="${com.mysql.cj.build.dir}" />
        <delete dir="${com.mysql.cj.testsuite.build.dir}" failonerror="false" />
        <delete dir="${com.mysql.cj.dist.dir}" failonerror="false" />
    </target>


    <!-- Delete the build directory. -->
    <target name="clean"
            description="Deletes the build directory unless 'com.mysql.cj.build.noCleanBetweenCompiles=yes'."
            unless="${com.mysql.cj.build.noCleanBetweenCompiles}">
        <delete dir="${com.mysql.cj.build.dir}" />
        <delete dir="${com.mysql.cj.testsuite.build.dir}" failonerror="false" />
    </target>


    <!-- Delete compiled classes from build directory. -->
    <target name="-clean-output" unless="${com.mysql.cj.build.noCleanBetweenCompiles}">
        <delete failonerror="false">
            <fileset dir="${com.mysql.cj.build.dir}" includes="**/*.class" />
            <fileset dir="${com.mysql.cj.testsuite.build.dir}" includes="**/*.class" />
        </delete>
    </target>


    <!-- ************************* -->
    <!-- ***** DOCUMENTATION ***** -->
    <!-- ************************* -->


    <!-- Generate docs for MySQL Connector/J docs web site. -->
    <target name="docs-generate-dynamic-docs"
            description="Generates docs for the MySQL Connector/J docs web site."
            depends="docs-generate-properties-table, docs-generate-error-mapping-table" />


    <!-- Generate the properties table doc for MySQL Connector/J docs web site. -->
    <target name="docs-generate-properties-table"
            description="Generates properties table doc for the MySQL Connector/J docs web site."
            depends="compile-driver">
        <tempfile property="com.mysql.cj.generated.properties.xml" suffix=".xml" />
        <java classname="com.mysql.cj.jdbc.util.PropertiesDocGenerator" output="${com.mysql.cj.generated.properties.xml}" classpath="${com.mysql.cj.build.dir.driver}" />
        <copy file="${com.mysql.cj.generated.properties.xml}" tofile="${com.mysql.cj.build.dir.driver}/docs/sources/connPropsToDocbook.xml" />
        <delete file="${com.mysql.cj.generated.properties.xml}" />
    </target>


    <!-- Generate the error mapping table doc for MySQL Connector/J docs web site. -->
    <target name="docs-generate-error-mapping-table"
            description="Generates error mapping table doc for the MySQL Connector/J docs web site."
            depends="compile-driver">
        <tempfile property="com.mysql.cj.generated.errorsMapping.xml" suffix=".xml" />
        <java classname="com.mysql.cj.jdbc.util.ErrorMappingsDocGenerator" output="${com.mysql.cj.generated.errorsMapping.xml}" classpath="${com.mysql.cj.build.dir.driver}" />
        <copy file="${com.mysql.cj.generated.errorsMapping.xml}" tofile="${com.mysql.cj.build.dir.driver}/docs/sources/errorMapToDocbook.xml" />
        <delete file="${com.mysql.cj.generated.errorsMapping.xml}" />
    </target>


    <!-- ******************* -->
    <!-- ***** TESTING ***** -->
    <!-- ******************* -->


    <!-- Run the full test suite, single test set or named tests against one JVM and one server config. -->
    <target name="test"
            description="Runs the full test suite, single test set (variable 'com.mysql.cj.testsuite.test.class') or named tests (variables 'com.mysql.cj.testsuite.test.class' and 'com.mysql.cj.testsuite.test.methods') against one JVM and one server config."
            depends="-testsuite-jvm-check, compile-testsuite">

        <mkdir dir="${com.mysql.cj.testsuite.junit.results}/report" />

        <local name="com.mysql.cj.testsuite.test.methods.enabled" />
        <condition property="com.mysql.cj.testsuite.test.methods.enabled">
            <and>
                <isset property="com.mysql.cj.testsuite.test.class" />
                <isset property="com.mysql.cj.testsuite.test.methods" />
            </and>
        </condition>

        <local name="com.mysql.cj.testsuite.message.test.mode" />
        <condition property="com.mysql.cj.testsuite.message.test.mode"
                   value="Running JDBC unit tests against '${com.mysql.cj.testsuite.url}' with jvm '${com.mysql.cj.testsuite.jvm.java}'">
            <not>
                <isset property="com.mysql.cj.testsuite.test.class" />
            </not>
        </condition>
        <condition property="com.mysql.cj.testsuite.message.test.mode"
                   value="Running JDBC unit test '${com.mysql.cj.testsuite.test.class}', method(s) '${com.mysql.cj.testsuite.test.methods}' against '${com.mysql.cj.testsuite.url}' with jvm '${com.mysql.cj.testsuite.jvm.java}'"
                   else="Running JDBC unit test '${com.mysql.cj.testsuite.test.class}' against '${com.mysql.cj.testsuite.url}' with jvm '${com.mysql.cj.testsuite.jvm.java}'">
            <isset property="com.mysql.cj.testsuite.test.methods.enabled" />
        </condition>
        <echo>${com.mysql.cj.testsuite.message.test.mode}</echo>

        <local name="test.coverage" />
        <condition property="test.coverage" value="true" else="false">
            <isset property="com.mysql.cj.coverage.result.dir.final" />
        </condition>

        <jacoco:coverage destfile="${com.mysql.cj.coverage.result.dir.final}/${com.mysql.cj.coverage.result.name.final}" enabled="${test.coverage}">
            <junit printsummary="yes"
                   fork="on"
                   forkmode="once"
                   jvm="${com.mysql.cj.testsuite.jvm.java}"
    	           errorProperty="com.mysql.cj.testsuite.junit.fail"
        	       failureProperty="com.mysql.cj.testsuite.junit.fail">
                <jvmarg value="-Xmx1024m" />
    
                <syspropertyset refid="junit.system.properties" />
                <sysproperty key="com.mysql.cj.testsuite.url" value="${com.mysql.cj.testsuite.url}" />
    
                <classpath>
                    <fileset dir="${com.mysql.cj.extra.libs}">
                        <include name="**/*.jar" />
                    </fileset>
                    <fileset dir="${com.mysql.cj.build.dir.driver}/lib">
                        <include name="**/*.jar" />
                    </fileset>
                    <pathelement location="${com.mysql.cj.build.dir.driver}" />
                    <pathelement location="${com.mysql.cj.testsuite.build.dir}/${com.mysql.cj.build.driver.fullName}" />
                    <pathelement path="${com.mysql.cj.testsuite.build.classpath}" />
                    <pathelement path="${java.class.path}" />
                </classpath>
    
                <formatter type="xml" />
    
                <test if="${com.mysql.cj.testsuite.test.methods.enabled}" name="${com.mysql.cj.testsuite.test.class}" methods="${com.mysql.cj.testsuite.test.methods}" todir="${com.mysql.cj.testsuite.junit.results}" />
    
                <test if="com.mysql.cj.testsuite.test.class" unless="com.mysql.cj.testsuite.test.methods" name="${com.mysql.cj.testsuite.test.class}" todir="${com.mysql.cj.testsuite.junit.results}" />
    
                <batchtest unless="com.mysql.cj.testsuite.test.class" todir="${com.mysql.cj.testsuite.junit.results}">
                    <fileset dir="${com.mysql.cj.testsuite.build.dir}/${com.mysql.cj.build.driver.fullName}">
                        <include name="**/*Test.java" />
                        <exclude name="**/fabric/*.java" />
                        <exclude name="**/perf/*.java" />
                    </fileset>
                </batchtest>
            </junit>
        </jacoco:coverage>

        <junitreport todir="${com.mysql.cj.testsuite.junit.results}/report">
            <fileset dir="${com.mysql.cj.testsuite.junit.results}">
                <include name="**/TEST-*.xml" />
            </fileset>
            <report format="frames" todir="${com.mysql.cj.testsuite.junit.results}/report" />
        </junitreport>

        <!-- Don't fail the build if we're doing coverage test. -->
        <fail message="Tests failed. Check logs and/or reports in '${com.mysql.cj.testsuite.junit.results}'.">
            <condition>
                <and>
                    <isset property="com.mysql.cj.testsuite.junit.fail" />
                </and>
            </condition>
        </fail>
    </target>


    <!-- ********************************* -->
    <!-- ***** FABRIC TESTS AND DEMO ***** -->
    <!-- ********************************* -->


    <!-- 'test' and 'demo' targets for Fabric intentionally don't depend on 'build'.
         This allows building and testing code with the environmental JVM. -->

    <!-- Test Fabric setup. -->
    <target name="test-fabric-setup" description="Tests Fabric setup." depends="-extra-libs-check">
        <java fork="on" classname="testsuite.fabric.SetupFabricTestsuite">
            <syspropertyset refid="junit.system.properties"/>
            <classpath>
                <pathelement location="${com.mysql.cj.testsuite.compiler.output}" />
                <pathelement location="${com.mysql.cj.build.dir.driver}" />
                <pathelement path="${java.class.path}" />
            </classpath>
        </java>
    </target>


    <!-- Run test suite for Fabric. -->
    <target name="test-fabric" description="Runs the test suite for Fabric." depends="test-fabric-setup">
        <mkdir dir="${com.mysql.cj.testsuite.junit.results}/report" />

        <local name="test.coverage" />
        <condition property="test.coverage" value="true" else="false">
            <isset property="com.mysql.cj.coverage.result.dir.final" />
        </condition>

        <jacoco:coverage destfile="${com.mysql.cj.coverage.result.dir.final}/${com.mysql.cj.coverage.result.name.final}" enabled="${test.coverage}">
        <junit printsummary="yes" fork="on" forkmode="once">
            <syspropertyset refid="junit.system.properties"/>

            <classpath>
                <fileset dir="${com.mysql.cj.extra.libs}/hibernate4">
                    <include name="**/*.jar" />
                </fileset>
                <fileset dir="${com.mysql.cj.build.dir.driver}/lib">
                    <include name="**/*.jar" />
                </fileset>
                <pathelement location="${com.mysql.cj.testsuite.compiler.output}" />
                <pathelement location="${com.mysql.cj.build.dir.driver}" />
                <pathelement path="${java.class.path}" />
            </classpath>

            <formatter type="xml" />

            <test if="com.mysql.cj.testsuite.test.class" name="${com.mysql.cj.testsuite.test.class}" />

            <batchtest unless="com.mysql.cj.testsuite.test.class" todir="${com.mysql.cj.testsuite.junit.results}">
                <fileset dir="${com.mysql.cj.testsuite.compiler.output}">
                    <include name="**/fabric/**/Test*.java" />
                    <exclude name="**/fabric/**/TestHashSharding.java" />
                    <exclude name="**/fabric/**/TestHABasics.java" />
                </fileset>
            </batchtest>
        </junit>
        </jacoco:coverage>

        <junitreport todir="${com.mysql.cj.testsuite.junit.results}/report">
            <fileset dir="${com.mysql.cj.testsuite.junit.results}">
                <include name="**/TEST-*.xml" />
            </fileset>
            <report format="frames" todir="${com.mysql.cj.testsuite.junit.results}/report" />
        </junitreport>
    </target>


    <!-- Launch a Fabric demo. -->
    <target name="demo-fabric" description="Launches a Fabric demo." depends="demo-fabric-client1, demo-fabric-employees-jdbc" />


    <!-- Launch a client component from the Fabric demo. -->
    <target name="demo-fabric-client1" description="Launches a client component from the Fabric demo." depends="-extra-libs-check">
        <java fork="on" classname="demo.fabric.Client1_Fabric" dir="${com.mysql.cj.build.dir.driver}">
            <syspropertyset refid="junit.system.properties"/>
        </java>
    </target>


    <!-- Launch an employees component from the Fabric demo. -->
    <target name="demo-fabric-employees-jdbc" description="Launches a employees component from the Fabric demo." depends="-extra-libs-check">
        <java fork="on" classname="demo.fabric.EmployeesJdbc" dir="${com.mysql.cj.build.dir.driver}">
            <syspropertyset refid="junit.system.properties"/>
        </java>
    </target>


    <!-- Launch a Hibernate component from the Fabric demo. -->
    <target name="demo-fabric-hibernate" description="Launches a Hibernate component from the Fabric demo." depends="-extra-libs-check">
        <java fork="on" classname="demo.fabric.HibernateFabric" dir="${com.mysql.cj.build.dir.driver}">
            <syspropertyset refid="junit.system.properties"/>

            <classpath>
                <fileset dir="${com.mysql.cj.extra.libs}/hibernate4">
                    <include name="**/*.jar" />
                </fileset>
                <fileset dir="src/lib">
                    <include name="**/*.jar" />
                </fileset>
                <dirset dir="${com.mysql.cj.build.dir.driver}" />
            </classpath>
        </java>
    </target>


    <!-- ********************************* -->
    <!-- ***** TESTING CODE COVERAGE ***** -->
    <!-- ********************************* -->


    <target name="test-coverage" description="Runs tests collecting coverage results." depends="-set-test-coverage-detaults, test"/>


    <target name="test-fabric-coverage" description="Runs tests collecting coverage results." depends="-set-test-coverage-detaults, test-fabric"/>


    <target name="-set-test-coverage-detaults">
        <condition property="com.mysql.cj.coverage.result.dir.final" value="${com.mysql.cj.coverage.result.dir}" else="${com.mysql.cj.testsuite.build.dir}/coverage">
            <isset property="com.mysql.cj.coverage.result.dir" />
        </condition>
        <condition property="com.mysql.cj.coverage.result.name.final" value="${com.mysql.cj.coverage.result.name}" else="jacoco.exec">
            <isset property="com.mysql.cj.coverage.result.name" />
        </condition>
    </target>


    <!-- *********************************** -->
    <!-- ***** REPORTING CODE COVERAGE ***** -->
    <!-- *********************************** -->


    <target name="report-coverage" depends="-set-report-coverage-detaults, -jacoco-merge" description="Merges coverage results and creates HTML coverage report.">
        <jacoco:report>
            <executiondata>
                <file file="${com.mysql.cj.coverage.merge.result.final}"/>
            </executiondata>

            <structure name="Connector/J classes">
                <classfiles>
                    <fileset dir="${com.mysql.cj.build.dir.driver}">
                        <include name="com/mysql/cj/**" />
                        <exclude name="com/mysql/cj/mysqlx/protobuf/**" />
                    </fileset>
                </classfiles>
                <sourcefiles encoding="UTF-8">
                    <fileset dir="${com.mysql.cj.build.dir.driver}">
                        <include name="com/mysql/cj/**" />
                        <exclude name="com/mysql/cj/mysqlx/protobuf/**" />
                    </fileset>
                </sourcefiles>
            </structure>

            <html destdir="${com.mysql.cj.coverage.report.dir.final}"/>

        </jacoco:report>
    </target>


    <target name="-jacoco-merge" depends="-set-report-coverage-detaults" if="com.mysql.cj.coverage.merge.files">
        <jacoco:merge destfile="${com.mysql.cj.coverage.merge.result.final}">
            <fileset dir="${com.mysql.cj.coverage.result.dir.final}" includes="${com.mysql.cj.coverage.merge.files}"/>
        </jacoco:merge>
    </target>


    <target name="-set-report-coverage-detaults" depends="-set-test-coverage-detaults">
        <condition property="com.mysql.cj.coverage.merge.result.final" value="${com.mysql.cj.coverage.merge.result}" else="${com.mysql.cj.coverage.result.dir.final}/jacoco.exec">
            <isset property="com.mysql.cj.coverage.merge.result" />
        </condition>
        <condition property="com.mysql.cj.coverage.report.dir.final" value="${com.mysql.cj.coverage.report.dir}" else="${com.mysql.cj.coverage.result.dir.final}/report">
            <isset property="com.mysql.cj.coverage.report.dir" />
        </condition>
    </target>


</project>
